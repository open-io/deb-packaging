diff -Naur Diamond-41a3cf0.old/src/diamond/handler/influxdbHandler.py Diamond-41a3cf0.new/src/diamond/handler/influxdbHandler.py
--- Diamond-41a3cf0.old/src/diamond/handler/influxdbHandler.py	2016-01-04 15:31:32.000000000 +0000
+++ Diamond-41a3cf0.new/src/diamond/handler/influxdbHandler.py	2016-01-05 13:39:29.851025691 +0000
@@ -10,12 +10,16 @@
        this whill avoid the 100% cpu loop when influx in not responding
        Sebastien Prune THOMAS - prune@lecentre.net
 
-#### Dependencies
- * [influxdb](https://github.com/influxdb/influxdb-python)
+- Dependency:
+    - influxdb client (pip install influxdb)
+      you need version > 0.1.6 for HTTPS (not yet released)
 
+- enable it in `diamond.conf` :
+
+handlers = diamond.handler.influxdbHandler.InfluxdbHandler
+
+- add config to `diamond.conf` :
 
-#### Configuration
-```
 [[InfluxdbHandler]]
 hostname = localhost
 port = 8086 #8084 for HTTPS
@@ -25,7 +29,6 @@
 password = root
 database = graphite
 time_precision = s
-```
 """
 
 import time
@@ -153,6 +156,23 @@
                 self.batch_count,
                 (time.time() - self.batch_timestamp))
 
+    def _build_metrics(self):
+        """
+        Build list of metrics formatted for the influxdb client.
+        """
+        metrics = []
+        for path in self.batch:
+            for point in self.batch[path]:
+                metrics.append({
+                    "measurement": path,
+                    "time": point[0],
+                    "fields": {
+                        "value": float(point[1])
+                    }
+                })
+
+        return metrics
+
     def _send(self):
         """
         Send data to Influxdb. Data that can not be sent will be kept in queued.
@@ -166,13 +186,8 @@
             if self.influx is None:
                 self.log.debug("InfluxdbHandler: Reconnect failed.")
             else:
-                # build metrics data
-                metrics = []
-                for path in self.batch:
-                    metrics.append({
-                        "points": self.batch[path],
-                        "name": path,
-                        "columns": ["time", "value"]})
+                # Build metrics.
+                metrics = self._build_metrics()
                 # Send data to influxdb
                 self.log.debug("InfluxdbHandler: writing %d series of data",
                                len(metrics))
@@ -207,6 +222,9 @@
             self.log.debug("InfluxdbHandler: Established connection to "
                            "%s:%d/%s.",
                            self.hostname, self.port, self.database)
+
+            # Create the database, if it doesn't exist.
+            self._create_database()
         except Exception, ex:
             # Log Error
             self._throttle_error("InfluxdbHandler: Failed to connect to "
@@ -221,3 +239,11 @@
         Close the socket = do nothing for influx which is http stateless
         """
         self.influx = None
+
+    def _create_database(self):
+        """
+        Create the database if it doesn't exist.
+        """
+        databases = [db['name'] for db in self.influx.get_list_database()]
+        if self.database not in databases:
+            self.influx.create_database(self.database)
